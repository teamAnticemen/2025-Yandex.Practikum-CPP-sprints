#include <cassert>
#include <functional>
#include <optional>
#include <string>

using namespace std;

template <typename T>
class LazyValue {
public:
    explicit LazyValue(function<T()> init) 
        : init_function(move(init)), value(optional<T>{}) {}

    bool HasValue() const {
        return value.has_value();
    }

    const T& Get() const {
        if (!value) {  // Если значение еще не создано
            value = init_function();  // Создаем и сохраняем значение
        }
        return *value;  // Возвращаем ссылку на созданное значение
    }

private:
    function<T()> init_function;  // Инициализирующая функция
    mutable optional<T> value;     // Хранимое значение
};

void UseExample() {
    const string big_string = "Giant amounts of memory"s;

    LazyValue<string> lazy_string([&big_string] {
        return big_string;
    });

    assert(!lazy_string.HasValue());
    assert(lazy_string.Get() == big_string);
    assert(lazy_string.Get() == big_string);
}

void TestInitializerIsntCalled() {
    bool called = false;

    {
        LazyValue<int> lazy_int([&called] {
            called = true;
            return 0;
        });
    }
    assert(!called);
}

int main() {
    UseExample();
    TestInitializerIsntCalled();
}
