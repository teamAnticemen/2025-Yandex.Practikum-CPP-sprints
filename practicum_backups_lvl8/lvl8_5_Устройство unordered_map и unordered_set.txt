#include <array>
#include <cassert>
#include <chrono>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <string>
#include <tuple>
#include <unordered_map>
#include <vector>

using namespace std;

class VehiclePlate {
private:
    auto AsTuple() const {
        return tie(letters_, digits_, region_);
    }

public:
    bool operator==(const VehiclePlate& other) const {
        return AsTuple() == other.AsTuple();
    }

    VehiclePlate(char l0, char l1, int digits, char l2, int region)
        : letters_{l0, l1, l2}, digits_(digits), region_(region) {}

    string ToString() const {
        ostringstream out;
        out << letters_[0] << letters_[1];
        out << setfill('0') << right << setw(3) << digits_;
        out << letters_[2] << setw(2) << region_;
        return out.str();
    }

private:
    array<char, 3> letters_;
    int digits_;
    int region_;
};

ostream& operator<<(ostream& out, VehiclePlate plate) {
    out << plate.ToString();
    return out;
}

class VehiclePlateHasher {
public:
    size_t operator()(const VehiclePlate& plate) const {
        return hash<string>()(plate.ToString());
    }
};

struct ParkingException {};

template <typename Clock>
class Parking {
    using Duration = typename Clock::duration;
    using TimePoint = typename Clock::time_point;

public:
    Parking(int cost_per_second) : cost_per_second_(cost_per_second) {}

    void Park(VehiclePlate car) {
        if (now_parked_.count(car) > 0) {
            throw ParkingException();
        }
        now_parked_[car] = Clock::now();
    }

    void Withdraw(const VehiclePlate& car) {
        auto it = now_parked_.find(car);
        if (it == now_parked_.end()) {
            throw ParkingException();
        }

        auto parked_time = Clock::now() - it->second; // Время, проведенное на парковке
        auto total_cost = chrono::duration_cast<chrono::seconds>(parked_time).count(); // Отправляем время проведенное на парковке

        // Обновляем счет завершенной парковки, создавая новую duration
        complete_parks_[car] += chrono::seconds(total_cost);
        now_parked_.erase(it); // Удаляем машину из текущих парковок
    }

    int64_t GetCurrentBill(const VehiclePlate& car) const {
        int64_t total_bill = complete_parks_.count(car) ? chrono::duration_cast<chrono::seconds>(complete_parks_.at(car)).count() * cost_per_second_ : 0;

        auto it = now_parked_.find(car);
        if (it != now_parked_.end()) {
            auto parked_time = Clock::now() - it->second;
            total_bill += chrono::duration_cast<chrono::seconds>(parked_time).count() * cost_per_second_;            
        }
        return total_bill;
    }

    unordered_map<VehiclePlate, int64_t, VehiclePlateHasher> EndPeriodAndGetBills() {
    unordered_map<VehiclePlate, int64_t, VehiclePlateHasher> bills;

    // Учитываем все текущие парковки и обновляем их счета
    for (const auto& [car, start_time] : now_parked_) {
        int64_t bill = GetCurrentBill(car); // Обновляем счет для текущей парковки
        bills[car] = bill; // Добавляем текущий счет
        complete_parks_[car] += chrono::seconds(bill); // Обновляем общий счет, преобразуя в seconds
    }

    // Учитываем завершенные парковки и добавляем их счета в bills
    for (const auto& [car, total_bill] : complete_parks_) {
        if (bills.find(car) == bills.end()) {
            bills[car] = chrono::duration_cast<chrono::seconds>(total_bill).count() * cost_per_second_; // Добавляем завершенные парковки, если их еще нет в счетах
        }
    }
    
    // Удаляем завершенные парковки из памяти
    for (const auto& car : bills) {
        complete_parks_.erase(car.first);
    }
        
    // Обновляем время парковки для текущих парковок
    for (auto& [car, start_time] : now_parked_) {
        // Устанавливаем время парковки на текущее время
        start_time = Clock::now();
    }

    return bills;
}


    auto& GetNowParked() const {
        return now_parked_;
    }

    auto& GetCompleteParks() const {
        return complete_parks_;
    }

private:
    int cost_per_second_;
    unordered_map<VehiclePlate, TimePoint, VehiclePlateHasher> now_parked_;
    unordered_map<VehiclePlate, Duration, VehiclePlateHasher> complete_parks_; // Используем Duration
};

class TestClock {
public:
    using time_point = chrono::system_clock::time_point;
    using duration = chrono::system_clock::duration;

    static void SetNow(int seconds) {
        current_time_ = seconds;
    }

    static time_point now() {
        return start_point_ + chrono::seconds(current_time_);
    }

private:
    inline static time_point start_point_ = chrono::system_clock::now();
    inline static int current_time_ = 0;
};

void PrintBills(const unordered_map<VehiclePlate, int64_t, VehiclePlateHasher>& bills) {
    for (const auto& [plate, bill] : bills) {
        cout << "Vehicle Plate: " << plate << ", Bill: " << bill << endl;
    }
}

int main() {
    Parking<TestClock> parking(10);

    TestClock::SetNow(10);
    parking.Park({'A', 'A', 111, 'A', 99});

    TestClock::SetNow(20);
    parking.Withdraw({'A', 'A', 111, 'A', 99});
    parking.Park({'B', 'B', 222, 'B', 99});

    TestClock::SetNow(40);
    assert(parking.GetCurrentBill({'A', 'A', 111, 'A', 99}) == 100);
    assert(parking.GetCurrentBill({'B', 'B', 222, 'B', 99}) == 200);
    parking.Park({'A', 'A', 111, 'A', 99});

    TestClock::SetNow(50);
    assert(parking.GetCurrentBill({'A', 'A', 111, 'A', 99}) == 200);
    assert(parking.GetCurrentBill({'B', 'B', 222, 'B', 99}) == 300);
    assert(parking.GetCurrentBill({'C', 'C', 333, 'C', 99}) == 0);
    parking.Withdraw({'B', 'B', 222, 'B', 99});

    TestClock::SetNow(70);
    {
        auto bill = parking.EndPeriodAndGetBills();
        PrintBills(bill);
        assert((bill == unordered_map<VehiclePlate, int64_t, VehiclePlateHasher>{
            {{'A', 'A', 111, 'A', 99}, 400},
            {{'B', 'B', 222, 'B', 99}, 300},
        }));
    }

    TestClock::SetNow(80);
    {
        auto bill = parking.EndPeriodAndGetBills();
        PrintBills(bill);
        assert((bill == unordered_map<VehiclePlate, int64_t, VehiclePlateHasher>{
            {{'A', 'A', 111, 'A', 99}, 100},
        }));
    }

    try {
        parking.Park({'A', 'A', 111, 'A', 99});
        assert(false);
    }
    catch (ParkingException) {
    }

    try {
        parking.Withdraw({'B', 'B', 222, 'B', 99});
        assert(false);
    }
    catch (ParkingException) {
    }

    cout << "Success!"s << endl;
}