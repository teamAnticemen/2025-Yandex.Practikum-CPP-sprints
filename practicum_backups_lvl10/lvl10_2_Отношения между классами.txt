#include <iostream>
#include <cassert>
#include <stdexcept>
#include <string>

using namespace std;

class House {
public:
    House(int length, int width, int height)
        : length(length), width(width), height(height) {}

    int GetLength() const {
        return length;
    }

    int GetWidth() const {
        return width;
    }

    int GetHeight() const {
        return height;
    }

private:
    int length;
    int width;
    int height;
};

class Resources {
public:
    Resources(int brickCount) : brickCount(brickCount) {}

    int GetBrickCount() const {
        return brickCount;
    }

    void TakeBricks(int count) {
        if (count < 0 || count > brickCount) {
            throw out_of_range("Not enough bricks or trying to take negative bricks");
        }
        brickCount -= count;
    }

private:
    int brickCount;
};

struct HouseSpecification {
    int length = 0;
    int width = 0;
    int height = 0;
};

class Builder {
public:
    Builder(Resources& resources) : resources(&resources) {}

    House BuildHouse(const HouseSpecification& spec) {
        int requiredBricks = CalculateBricks(spec);
        if (requiredBricks > resources->GetBrickCount()) {
            throw runtime_error("Not enough bricks to build the house");
        }
        resources->TakeBricks(requiredBricks);
        return House(spec.length, spec.width, spec.height);
    }

private:
    Resources* resources;

    int CalculateBricks(const HouseSpecification& spec) {
        // Объем стен (4 стены)
        int perimeter = 2 * (spec.length + spec.width);
        int wallArea = perimeter * spec.height; // площадь всех стен
        return wallArea * 4 * 8; // 4 кирпича на 1 м²
    }
};

int main() {
    Resources resources{10000};
    Builder builder1{resources};
    Builder builder2{resources};

    House house1 = builder1.BuildHouse(HouseSpecification{12, 9, 3});
    assert(house1.GetLength() == 12);
    assert(house1.GetWidth() == 9);
    assert(house1.GetHeight() == 3);
    cout << resources.GetBrickCount() << " bricks left" << endl;

    House house2 = builder2.BuildHouse(HouseSpecification{8, 6, 3});
    assert(house2.GetLength() == 8);
    cout << resources.GetBrickCount() << " bricks left" << endl;

    House banya = builder1.BuildHouse(HouseSpecification{4, 3, 2});
    assert(banya.GetHeight() == 2);
    cout << resources.GetBrickCount() << " bricks left" << endl;

    return 0;
}
