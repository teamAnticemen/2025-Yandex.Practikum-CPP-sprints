#pragma once

#include <array>
#include <stdexcept>
#include <iterator>

template <typename T, size_t N>
class StackVector {
public:
    explicit StackVector(size_t a_size = 0) : size_(a_size) {
        if (a_size > N) {
            throw std::invalid_argument("Size exceeds capacity");
        }
    }

    T& operator[](size_t index) {
        if (index >= size_) {
            throw std::out_of_range("Index out of range");
        }
        return data_[index];
    }

    const T& operator[](size_t index) const {
        if (index >= size_) {
            throw std::out_of_range("Index out of range");
        }
        return data_[index];
    }

    // Iterator types
    using iterator = T*;
    using const_iterator = const T*;

    iterator begin() {
        return data_.data();
    }

    iterator end() {
        return data_.data() + size_;
    }

    const_iterator begin() const {
        return data_.data();
    }

    const_iterator end() const {
        return data_.data() + size_;
    }

    size_t Size() const {
        return size_;
    }

    size_t Capacity() const {
        return N;
    }

    void PushBack(const T& value) {
        if (size_ >= N) {
            throw std::overflow_error("StackVector is full");
        }
        data_[size_] = value;
        ++size_;
    }

    T PopBack() {
        if (size_ == 0) {
            throw std::underflow_error("StackVector is empty");
        }
        --size_;
        return data_[size_];
    }

private:
    std::array<T, N> data_; // Array to hold the elements
    size_t size_ = 0;       // Current number of elements
};