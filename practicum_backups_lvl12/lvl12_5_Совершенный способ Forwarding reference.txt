#include <iostream>
#include <string>
#include <memory>
#include <utility>

using namespace std;

// Базовый класс для хранения любого типа
class AnyStorageBase {
public:
    virtual ~AnyStorageBase() = default;
    virtual void Print(ostream& out) const = 0;
};

// Шаблонный класс для хранения конкретного типа
template <typename T>
class AnyStorage : public AnyStorageBase {
public:
    // Конструктор, принимающий объект типа T с помощью forwarding reference
    template <typename S>
    AnyStorage(S&& value) : data_(std::forward<S>(value)) {}

    // Реализация метода Print для вывода значения в поток
    void Print(ostream& out) const override {
        out << data_;
    }

private:
    T data_;  // Хранимое значение
};

// Класс Any, который может хранить объекты любого типа
class Any {
public:
    // Шаблонный конструктор, принимающий объект любого типа
    template <typename S>
    Any(S&& value) {
        using Initial = std::remove_reference_t<S>;  // Убираем ссылки из типа
        ptr_ = std::make_unique<AnyStorage<Initial>>(std::forward<S>(value));
    }

    // Метод для вывода хранимого значения в поток
    void Print(ostream& out) const {
        ptr_->Print(out);
    }

private:
    std::unique_ptr<AnyStorageBase> ptr_;  // Указатель на хранимое значение
};

// Оператор вывода для класса Any
ostream& operator<<(ostream& out, const Any& arg) {
    arg.Print(out);
    return out;
}

// Класс Dumper для тестирования
class Dumper {
public:
    Dumper() {
        std::cout << "construct"sv << std::endl;
    }
    ~Dumper() {
        std::cout << "destruct"sv << std::endl;
    }
    Dumper(const Dumper&) {
        std::cout << "copy"sv << std::endl;
    }
    Dumper(Dumper&&) {
        std::cout << "move"sv << std::endl;
    }
    Dumper& operator=(const Dumper&) {
        std::cout << "= copy"sv << std::endl;
        return *this;
    }
    Dumper& operator=(Dumper&&) {
        std::cout << "= move"sv << std::endl;
        return *this;
    }
};

// Оператор вывода для класса Dumper
ostream& operator<<(ostream& out, const Dumper&) {
    return out;
}

int main() {
    Any any_int(42);
    Any any_string("abc"s);

    // Операция вывода Any в поток
    cout << any_int << endl << any_string << endl;

    Any any_dumper_temp{Dumper{}};

    Dumper auto_dumper;
    Any any_dumper_auto(auto_dumper);

    return 0;
}