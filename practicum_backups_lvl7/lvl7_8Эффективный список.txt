#include <iostream>
#include <list>
#include <string>

class Editor {
public:
    Editor() : cursor(text.end()) {}

    void Left() {
        if (cursor != text.begin()) {
            --cursor;
        }
    }

    void Right() {
        if (cursor != text.end()) {
            ++cursor;
        }
    }

    void Insert(char token) {
        cursor = text.insert(cursor, token);
        ++cursor;
    }

    void Cut(size_t tokens = 1) {
        buffer.clear();
        auto temp = cursor;
        size_t count = 0;

        while (temp != text.end() && count < tokens) {
            buffer.push_back(*temp);
            temp = text.erase(temp);
            ++count;
        }
        cursor = temp; // перемещаем курсор на новое место
    }

    void Copy(size_t tokens = 1) {
        buffer.clear();
        auto temp = cursor;
        size_t count = 0;

        while (temp != text.end() && count < tokens) {
            buffer.push_back(*temp);
            ++temp;
            ++count;
        }
    }

    void Paste() {
        for (char c : buffer) {
            cursor = text.insert(cursor, c);
            ++cursor;
        }
    }

    std::string GetText() const {
        return std::string(text.begin(), text.end());
    }

private:
    std::list<char> text;       // Список символов, представляющий текст
    std::list<char> buffer;     // Буфер обмена
    std::list<char>::iterator cursor; // Итератор для курсора
};

int main() {
    Editor editor;
    const std::string text = "hello, world";
    for (char c : text) {
        editor.Insert(c);
    }
    // Текущее состояние редактора: `hello, world|`
    for (size_t i = 0; i < text.size(); ++i) {
        editor.Left();
    }
    // Текущее состояние редактора: `|hello, world`
    editor.Cut(7);
    // Текущее состояние редактора: `|world`
    // в буфере обмена находится текст `hello, `
    for (size_t i = 0; i < 5; ++i) {
        editor.Right();
    }
    // Текущее состояние редактора: `world|`
    editor.Insert(',');
    editor.Insert(' ');
    // Текущее состояние редактора: `world, |`
    editor.Paste();
    // Текущее состояние редактора: `world, hello, |`
    editor.Left();
    editor.Left();
    // Текущее состояние редактора: `world, hello|, `
    editor.Cut(3);  // Будут вырезаны 2 символа
    // Текущее состояние редактора: `world, hello|`
    
    std::cout << editor.GetText();  // Ожидается вывод: `world, hello`
    return 0;
}