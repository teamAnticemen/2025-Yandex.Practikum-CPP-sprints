#include <iostream>
#include <list>
#include <set>
#include <string_view>
#include <vector>
#include <algorithm>  // для std::less

using namespace std;

// Функция Merge, принимающая итераторы
template <typename InputIt1, typename InputIt2>
void Merge(InputIt1 begin1, InputIt1 end1, InputIt2 begin2, InputIt2 end2, ostream& out) {
    auto it1 = begin1;
    auto it2 = begin2;
    std::less<> less_compare;

    while (it1 != end1 && it2 != end2) {
        if (less_compare(*it1, *it2)) {
            out << *it1++ << endl;
        } else {
            out << *it2++ << endl;
        }
    }

    while (it1 != end1) {
        out << *it1++ << endl;
    }

    while (it2 != end2) {
        out << *it2++ << endl;
    }
}

// Шаблонная функция MergeSomething для любых контейнеров
template <typename Container1, typename Container2>
void MergeSomething(const Container1& src1, const Container2& src2, ostream& out) {
    Merge(src1.begin(), src1.end(), src2.begin(), src2.end(), out);
}

// Функция MergeHalves для слияния двух половин вектора
template <typename T>
void MergeHalves(const vector<T>& src, ostream& out) {
    size_t mid = (src.size() + 1) / 2;
    Merge(src.begin(), src.begin() + mid, src.begin() + mid, src.end(), out);
}

int main() {
    vector<int> v1{60, 70, 80, 90};
    vector<int> v2{65, 75, 85, 95};
    vector<int> combined{60, 70, 80, 90, 65, 75, 85, 95};
    list<double> my_list{0.1, 72.5, 82.11, 1e+30};
    string_view my_string = "ACNZ"sv;
    set<unsigned> my_set{20u, 77u, 81u};

    cout << "Merging vectors:"sv << endl;
    MergeSomething(v1, v2, cout);

    cout << "Merging vector and list:"sv << endl;
    MergeSomething(v1, my_list, cout);

    cout << "Merging string and list:"sv << endl;
    MergeSomething(my_string, my_list, cout);

    cout << "Merging set and vector:"sv << endl;
    MergeSomething(my_set, v2, cout);

    cout << "Merging vector halves:"sv << endl;
    MergeHalves(combined, cout);

    return 0;
}