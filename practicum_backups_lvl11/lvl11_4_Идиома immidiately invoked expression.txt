#include <algorithm>
#include <iostream>
#include <numeric>
#include <string>
#include <vector>

using namespace std;

template <typename Iterator>
class IteratorRange {
public:
    IteratorRange(Iterator begin, Iterator end)
        : first(begin)
        , last(end) {
    }

    Iterator begin() const {
        return first;
    }

    Iterator end() const {
        return last;
    }

private:
    Iterator first, last;
};

template <typename Collection>
auto Head(Collection& v, size_t top) {
    return IteratorRange{v.begin(), next(v.begin(), min(top, v.size()))};
}

struct Person {
    string name;
    int age, income;
    bool is_male;
};

vector<Person> ReadPeople(istream& input) {
    int count;
    input >> count;

    vector<Person> result(count);
    for (Person& p : result) {
        char gender;
        input >> p.name >> p.age >> p.income >> gender;
        p.is_male = gender == 'M';
    }

    return result;
}

int main() {
    const vector<Person> people = ReadPeople(cin);

    // Сортировка по возрасту для команды AGE
    vector<Person> sorted_by_age = people;
    sort(sorted_by_age.begin(), sorted_by_age.end(), 
        [](const Person& lhs, const Person& rhs) {
            return lhs.age < rhs.age;
        });

    // Сортировка по доходу для команды WEALTHY
    vector<Person> sorted_by_income = people;
    sort(sorted_by_income.begin(), sorted_by_income.end(),
        [](const Person& lhs, const Person& rhs) {
            return lhs.income > rhs.income;
        });

    // Подготовка данных для команды POPULAR_NAME
    vector<Person> males;
    vector<Person> females;
    for (const Person& p : people) {
        if (p.is_male) {
            males.push_back(p);
        } else {
            females.push_back(p);
        }
    }

    sort(males.begin(), males.end(), 
        [](const Person& lhs, const Person& rhs) {
            return lhs.name < rhs.name;
        });

    sort(females.begin(), females.end(),
        [](const Person& lhs, const Person& rhs) {
            return lhs.name < rhs.name;
        });

    for (string command; cin >> command;) {
        if (command == "AGE"s) {
            int adult_age;
            cin >> adult_age;

            auto adult_begin = lower_bound(sorted_by_age.begin(), sorted_by_age.end(), adult_age, 
                [](const Person& lhs, int age) {
                    return lhs.age < age;
                });

            cout << "There are "s << distance(adult_begin, sorted_by_age.end()) << " adult people for maturity age "s
                 << adult_age << '\n';
        } else if (command == "WEALTHY"s) {
            int count;
            cin >> count;

            auto head = Head(sorted_by_income, count);

            int total_income = accumulate(head.begin(), head.end(), 0, [](int cur, const Person& p) {
                return cur + p.income;
            });
            cout << "Top-"s << count << " people have total income "s << total_income << '\n';
        } else if (command == "POPULAR_NAME"s) {
            char gender;
            cin >> gender;

            const vector<Person>& range = (gender == 'M') ? males : females;

            if (range.empty()) {
                cout << "No people of gender "s << gender << '\n';
            } else {
                const string* most_popular_name = &range[0].name;
                int count = 1;
                for (auto i = range.begin(); i != range.end();) {
                    auto same_name_end = find_if_not(i, range.end(), 
                        [i](const Person& p) {
                            return p.name == i->name;
                        });
                    auto cur_name_count = distance(i, same_name_end);
                    if (cur_name_count > count) {
                        count = cur_name_count;
                        most_popular_name = &i->name;
                    }
                    i = same_name_end;
                }
                cout << "Most popular name among people of gender "s << gender << " is "s << *most_popular_name << '\n';
            }
        }
    }
}